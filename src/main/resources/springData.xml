<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="userServiceImpl" class="com.yang.service.UserServiceImpl"></bean>
    <bean id="orderServiceImpl" class="com.yang.service.OrderImplService"></bean>

    <!--    定义两个advice-->
    <bean id="logArgsAdvice" class="com.yang.config.advice.LogArgsAdvice"></bean>
    <bean id="logResultAdvice" class="com.yang.config.advice.LogResultAdvice"></bean>

    <!--    定义一个只拦截queryUser方法的advisor-->
<!--    <bean id="logCreateAdvisor" class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor">-->
<!--        <property name="advice" ref="logArgsAdvice"></property>-->
<!--        <property name="mappedNames" value="createUser,createOrder"></property>-->
<!--    </bean>-->

<!--    实际上Advisor还有一个更加灵活的实现类RegexpMethodPointcutAdvisor能够实现正则匹配-->
    <bean id="logArgsAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <property name="advice" ref="logArgsAdvice"/>
        <property name="pattern" value="com.yang.service.*.create.*"/>
    </bean>

    <bean id="logResultAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <property name="advice" ref="logResultAdvice"></property>
        <property name="pattern" value="com.yang.service.*.query.*"/>
    </bean>

<!--    定义DefaultAdvisorAutoProxyCreator-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>

<!--    这种代理有一个问题就是我们需要为每一个bean都配置一个代理，之后获取bean的时候需要获取这个代理类的bean实例，所以使用autoProxy自动根据类型注入-->
<!--    <bean id="userServiceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">-->
<!--        &lt;!&ndash;        代理接口&ndash;&gt;-->
<!--        <property name="proxyInterfaces">-->
<!--            <list>-->
<!--                <value>com.yang.service.UserService</value>-->
<!--            </list>-->
<!--        </property>-->

<!--        &lt;!&ndash;        代理的具体实现&ndash;&gt;-->
<!--        <property name="target" ref="userServiceImpl"></property>-->

<!--        &lt;!&ndash;  配置拦截器，这里可以配置 advice， advisor, interceptor&ndash;&gt;-->
<!--        <property name="interceptorNames">-->
<!--            <list>-->
<!--&lt;!&ndash;                <value>logArgsAdvice</value>&ndash;&gt;-->
<!--&lt;!&ndash;                <value>logResultAdvice</value>&ndash;&gt;-->
<!--                <value>logCreateAdvisor</value>-->
<!--            </list>-->
<!--        </property>-->

<!--    </bean>-->

    <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="interceptorNames">
            <list>
                <value>logArgsAdvice</value>
                <value>logResultAdvice</value>
            </list>
        </property>
<!--        beanNames中可以使用正则来匹配bean的名字-->
        <property name="beanNames" value="*ServiceImpl"></property>
    </bean>

<!--    开启@AspectJ的注解配置方法，第一种方式-->
    <aop:aspectj-autoproxy/>
<!--    然后在spring的config中使用@EnableAspectJAutoProxy-->

</beans>